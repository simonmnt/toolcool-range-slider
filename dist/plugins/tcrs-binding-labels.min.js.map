{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/binding-labels-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport { getNumber } from '../../core/domain/math-provider';\nimport RangeSlider from '../../core';\n\n/**\n * Binding Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst BindingLabelsPlugin = () : IPlugin => {\n\n  let getters: IPluginGetters | null = null;\n  let $component: HTMLElement | null = null;\n  let requestUpdate: (() => void) | null = null;\n\n  const paths: (string | undefined)[] = [];\n  const $labels: (HTMLElement | undefined)[] = [];\n\n  const initApiProp = (apiProp: string, index: number) => {\n    if(!Object.prototype.hasOwnProperty.call($component, apiProp)){\n      Object.defineProperty($component, apiProp, {\n        get () {\n          return paths[index];\n        },\n\n        set: (val) => {\n          updateLabel(index, val);\n        },\n      });\n    }\n  };\n\n  const updateLabel = (index: number, newPath: string) => {\n\n    const isDefined = !!$labels[index];\n\n    if($labels[index]){\n      ($labels[index] as HTMLElement).textContent = '';\n    }\n\n    const $newLabel = document.querySelector(newPath) as HTMLElement;\n    $labels[index] = $newLabel ?? undefined;\n\n    paths[index] = newPath ?? undefined;\n\n    if(!isDefined){\n      if(index === 0){\n        initApiProp(`valueLabel`, index);\n        initApiProp(`value0Label`, index);\n        initApiProp(`value1Label`, index);\n      }\n      else{\n        initApiProp(`value${ index + 1 }Label`, index);\n      }\n    }\n\n    if(typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  const initLabels = () => {\n\n    const values = getters?.getValues() ?? [];\n\n    for(let i=0; i<values.length; i++){\n\n      // find labels path for the given index -------------------------\n      let labelPath = '';\n\n      if(i === 0){\n        labelPath = $component?.getAttribute(`value-label`) ?? '';\n        if(!labelPath){\n          labelPath = $component?.getAttribute(`value0-label`) ?? '';\n        }\n        if(!labelPath){\n          labelPath = $component?.getAttribute(`value1-label`) ?? '';\n        }\n      }\n      else{\n        labelPath = $component?.getAttribute(`value${ i + 1 }-label`) ?? '';\n      }\n\n      if(!labelPath){\n        $labels[i] = undefined;\n        paths[i] = undefined;\n        continue;\n      }\n\n      // create label\n      const $label = document.querySelector(labelPath) as HTMLElement;\n\n      if(!$label){\n        $labels[i] = undefined;\n        paths[i] = undefined;\n        continue;\n      }\n\n      $labels[i] = $label;\n      paths[i] = labelPath;\n\n      // set current value\n      if ($label instanceof HTMLInputElement) {\n        $label.value = values[i]?.toString() ?? '';\n      } else {\n        $label.textContent = values[i]?.toString() ?? '';\n      }\n\n      if(i === 0){\n        initApiProp(`valueLabel`, i);\n        initApiProp(`value0Label`, i);\n        initApiProp(`value1Label`, i);\n      }\n      else{\n        initApiProp(`value${ i + 1 }Label`, i);\n      }\n    }\n\n    if(typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Binding Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      requestUpdate = _requestUpdate;\n      getters = _getters;\n\n      initLabels();\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update: (data: IPluginUpdateData) => {\n\n      for(let i=0; i<data.values.length; i++){\n        const $label = $labels[i];\n        if(!$label) continue;\n\n        const value = data.values[i] ?? '';\n\n        if ($label instanceof HTMLInputElement) {\n          $label.value = value.toString() ?? '';\n        } else {\n          $label.textContent = value.toString() ?? '';\n        }\n      }\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n\n      if(/^value([0-9]*)-label$/.test(_attrName) && typeof requestUpdate === 'function'){\n        const key = _attrName.replace(/\\D/g, '').trim();\n        const index = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n        updateLabel(index, _newValue);\n      }\n    },\n\n    destroy: () => {\n      for(const $label of $labels){\n        if(!$label) continue;\n        $label.remove();\n      }\n    },\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(BindingLabelsPlugin);\n\nexport default BindingLabelsPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IBindingLabelsPlugin extends RangeSlider{\n  valueLabel: string;\n  [name: `value${number}Label`]: string;\n}\n"],
  "mappings": "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",
  "names": ["isNumber", "input", "getNumber", "defaultValue", "BindingLabelsPlugin", "getters", "$component", "requestUpdate", "paths", "$labels", "initApiProp", "apiProp", "index", "val", "updateLabel", "newPath", "isDefined", "$newLabel", "initLabels", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "values", "i", "labelPath", "$label", "_$component", "_requestUpdate", "_setters", "_getters", "data", "value", "_attrName", "_newValue", "key", "getNumber", "binding_labels_plugin_default"]
}
