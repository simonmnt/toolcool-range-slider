{
  "version": 3,
  "sources": ["../src/core/templates/main.html.js", "../src/core/enums/attributes-enum.ts", "../src/core/enums/type-enum.ts", "../src/core/domain/math-provider.ts", "../src/core/domain/events-provider.ts", "../src/core/ui/pointer.ts", "../src/core/dal/data-provider.ts", "../src/core/ui/panel-fill.ts", "../src/core/enums/css-vars-enum.ts", "../src/core/domain/common-provider.ts", "../src/core/ui/styles.ts", "../src/core/enums/css-classes-enum.ts", "../src/core/plugins/plugins-manager.ts", "../src/core/domain/pointers-provider.ts", "../src/core/ui/slider.ts", "../src/core/domain/attributes-provider.ts", "../src/core/app/range-slider.ts", "../src/core/index.ts"],
  "sourcesContent": ["export default (styles, linkHrefs) => { return ` ${ linkHrefs && linkHrefs.length > 0 ? linkHrefs.map(linkHref => `<link rel=\"stylesheet\" href=\"${ linkHref }\" />`).join('') : '' } <style> ${styles} </style> <div class=\"range-slider-box\"> <div class=\"row\"> <div id=\"range-slider\" class=\"range-slider\"> <div class=\"container\"> <div class=\"panel\"></div> <div class=\"panel-fill\"></div> <div class=\"container\"> <div class=\"pointer\" tabindex=\"0\" role=\"slider\"> <div class=\"pointer-shape\"></div> </div> </div> </div> </div> </div> </div>`; }; ", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const PointersOverlap = 'pointers-overlap';\nexport const PointersMinDistance = 'pointers-min-distance';\nexport const PointersMaxDistance = 'pointers-max-distance';\nexport const RangeDragging = 'range-dragging';\n\nexport const Data = 'data';\nexport const Min = 'min';\nexport const Max = 'max';\nexport const Step = 'step';\nexport const Round = 'round';\nexport const Type = 'type';\nexport const Theme = 'theme';\nexport const RightToLeft = 'rtl';\nexport const BottomToTop = 'btt';\n\nexport const Disabled = 'disabled';\nexport const KeyboardDisabled = 'keyboard-disabled';\nexport const MousewheelDisabled = 'mousewheel-disabled';\n\nexport const SliderWidth = 'slider-width';\nexport const SliderHeight = 'slider-height';\nexport const SliderRadius = 'slider-radius';\n\nexport const SliderBg = 'slider-bg';\nexport const SliderBgHover = 'slider-bg-hover';\nexport const SliderBgFill = 'slider-bg-fill';\n\nexport const PointerWidth = 'pointer-width';\nexport const PointerHeight = 'pointer-height';\nexport const PointerRadius = 'pointer-radius';\nexport const PointerBg = 'pointer-bg';\nexport const PointerBgHover = 'pointer-bg-hover';\nexport const PointerBgFocus = 'pointer-bg-focus';\nexport const PointerShadow = 'pointer-shadow';\nexport const PointerShadowHover = 'pointer-shadow-hover';\nexport const PointerShadowFocus = 'pointer-shadow-focus';\nexport const PointerBorder = 'pointer-border';\nexport const PointerBorderHover = 'pointer-border-hover';\nexport const PointerBorderFocus = 'pointer-border-focus';\n\nexport const AnimateOnClick = 'animate-onclick';\nexport const CSSLinks = 'css-links';\n", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const Vertical = 'vertical';\nexport const Horizontal = 'horizontal';\n", "/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { getNumber, isNumber } from './math-provider';\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\ninterface IIndexable<T = any> { [key: string]: T }\n\nexport const sendPointerClickedEvent = ($component: HTMLElement, $pointer: HTMLElement) => {\n  $component.dispatchEvent(\n    new CustomEvent('onPointerClicked', {\n      detail: {\n        $pointer: $pointer,\n      },\n    })\n  );\n};\n\nexport const sendMouseDownEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendMouseUpEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseUp', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendOnKeyDownEvent = ($component: HTMLElement, evt: KeyboardEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onKeyDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendChangeEvent = (\n  $component: HTMLElement,\n  values: (string | number | undefined)[],\n) => {\n\n  if(!values || values.length <= 0) return;\n\n  const transformed = values.map(value => isNumber(value) ? getNumber(value, value) : value);\n\n  const detail: IIndexable = {\n    values: transformed || [],\n  };\n\n  detail.value = transformed[0];\n  detail.value0 = transformed[0];\n  detail.value1 = transformed[0];\n\n  for(let i=1; i<transformed.length; i++){\n    detail[`value${ i + 1 }`] = transformed[i];\n  }\n\n  $component.dispatchEvent(\n    new CustomEvent('change', {\n      detail,\n    })\n  );\n};", "import * as TypeEnum from '../enums/type-enum';\nimport { sendOnKeyDownEvent, sendPointerClickedEvent } from '../domain/events-provider';\n\nexport interface IPointer {\n  readonly percent: number;\n  readonly $pointer: HTMLElement;\n\n  updatePosition: (percent: number, leftWall: number | undefined, rightWall: number | undefined, type: string, rightToLeft: boolean, bottomToTop: boolean) => boolean;\n\n  disabled: boolean;\n\n  isClicked: ($target: HTMLElement) => boolean;\n  setCallbacks: (\n    arrowLeft: (pointerIndex: number) => void,\n    arrowRight: (pointerIndex: number) => void,\n    arrowUp: (pointerIndex: number) => void,\n    arrowDown: (pointerIndex: number) => void\n  ) => void;\n\n  setAttr: (key: string, value: string | null | undefined) => void;\n  getAttr: (key: string) => string | null;\n\n  destroy: () => void;\n}\n\nexport const Pointer = ($component: HTMLElement, $pointer: HTMLElement, index: number) : IPointer => {\n\n  // the pointer value in % in the range [0, 100] -\n  // used to render the pointer position\n  let percent = 0;\n\n  let arrowLeft: (pointerIndex: number) => void;\n  let arrowRight: (pointerIndex: number) => void;\n  let arrowUp: (pointerIndex: number) => void;\n  let arrowDown: (pointerIndex: number) => void;\n\n  let disabled = false;\n\n  // -------------- APIs -------------------------\n\n  /**\n   * Update pointer position according to its percent (value).\n   * Returns true if change position has changed.\n   */\n  const updatePosition = (\n      _percent: number,\n      _leftWall: number | undefined,\n      _rightWall: number | undefined,\n      _type: string,\n      _rightToLeft: boolean,\n      _bottomToTop: boolean): boolean => {\n\n    const oldValue = percent;\n\n    if(_rightWall !== undefined && _percent > _rightWall){\n      _percent = _rightWall;\n    }\n\n    if(_leftWall !== undefined && _percent < _leftWall){\n      _percent = _leftWall;\n    }\n\n    percent = _percent;\n    // $pointer.focus();\n\n    // the below code should not change the global pointer percent,\n    // only its position on the panel\n    let percentPos = percent;\n    if((_type === TypeEnum.Vertical && _bottomToTop) ||\n      (_type === TypeEnum.Horizontal && _rightToLeft)) {\n      percentPos = 100 - percentPos;\n    }\n\n    if (_type === TypeEnum.Vertical) {\n      $pointer.style.top = `${ percentPos }%`;\n    }\n    else {\n      $pointer.style.left = `${ percentPos }%`;\n    }\n\n    return oldValue !== percent;\n  };\n\n  const isClicked = ($target: HTMLElement) => {\n    return $target === $pointer || $pointer.contains($target);\n  };\n\n  const setCallbacks = (\n    _arrowLeft: (pointerIndex: number) => void,\n    _arrowRight: (pointerIndex: number) => void,\n    _arrowUp: (pointerIndex: number) => void,\n    _arrowDown: (pointerIndex: number) => void\n  ) => {\n    arrowLeft = _arrowLeft;\n    arrowRight = _arrowRight;\n    arrowUp = _arrowUp;\n    arrowDown = _arrowDown;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $pointer.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $pointer.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($pointer.hasAttribute('aria-disabled')) {\n        $pointer.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setAttr = (key: string, value: string | null | undefined) => {\n    if(value === null || value === undefined){\n      $pointer.removeAttribute(key);\n    }\n    else{\n      $pointer.setAttribute(key, value);\n    }\n  };\n\n  const getAttr = (key: string) => {\n    return $pointer.getAttribute(key);\n  };\n\n  // -------------- Events ------------------------\n\n  const pointerKeyDown = (evt: KeyboardEvent) => {\n    if(disabled) return;\n\n    switch (evt.key) {\n      case 'ArrowLeft': {\n        evt.preventDefault();\n        if(typeof arrowLeft === 'function'){\n          arrowLeft(index);\n        }\n        break;\n      }\n\n      case 'ArrowRight': {\n        evt.preventDefault();\n        if(typeof arrowRight === 'function'){\n          arrowRight(index);\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        evt.preventDefault();\n        if(typeof arrowUp === 'function'){\n          arrowUp(index);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        evt.preventDefault();\n        if(typeof arrowDown === 'function'){\n          arrowDown(index);\n        }\n        break;\n      }\n    }\n\n    sendOnKeyDownEvent($component, evt);\n  };\n\n  const pointerClicked = () => {\n    if(disabled) return;\n    sendPointerClickedEvent($component, $pointer);\n  };\n\n  // ---------- Lifecycle ------------------------\n\n  (() => {\n    $pointer.className = `pointer pointer-${ index }`;\n\n    $pointer.addEventListener('keydown', pointerKeyDown);\n    $pointer.addEventListener('click', pointerClicked);\n  })();\n\n  const destroy = () => {\n    $pointer.removeEventListener('keydown', pointerKeyDown);\n    $pointer.removeEventListener('click', pointerClicked);\n    $pointer.remove();\n  };\n\n  return {\n    $pointer,\n\n    get percent() {\n      return percent;\n    },\n\n    get disabled() {\n      return disabled;\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    updatePosition,\n\n    isClicked,\n    setCallbacks,\n    setAttr,\n    getAttr,\n\n    destroy,\n  };\n};\n\n", "import { isNumber } from '../domain/math-provider';\n\nexport const parseData = (dataString: string | undefined | null): (string | number)[] | undefined => {\n  if (dataString === undefined || dataString === null) return undefined;\n\n  if(Array.isArray(dataString)) return dataString as (string | number)[];\n\n  const result = dataString.trim();\n  if (result === '') return undefined;\n\n  const parts = dataString.split(',');\n  const list: string[] = [];\n  let allValuesAreNumbers = true;\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i].trim();\n    if (part === '') continue;\n\n    list.push(part);\n\n    if (!isNumber(part)) {\n      allValuesAreNumbers = false;\n    }\n  }\n\n  if (!allValuesAreNumbers) return list;\n\n  return list.map((item) => Number(item));\n};\n\nexport const findValueIndexInData = (val: string | number, data: (string | number)[] | undefined) => {\n  return data ? data.findIndex((item) => item === val || item.toString().trim() === val.toString().trim()) : -1;\n};", "import * as TypeEnum from '../enums/type-enum';\n\nexport interface IPanelFill {\n  updatePosition: (type: string, percents: (number | undefined)[], rightToLeft: boolean, bottomToTop: boolean) => void;\n}\n\nexport const PanelFill = ($fill: HTMLElement) : IPanelFill => {\n\n  const updatePosition = (type: string, percents: (number | undefined)[], rightToLeft: boolean, bottomToTop: boolean) => {\n\n    if(percents.length <= 0) return;\n\n    const oneOnly = percents.length === 1;\n    const first = percents[0] as number;\n    const last = percents[percents.length - 1] as number;\n\n    if (type === TypeEnum.Vertical) {\n      $fill.style.removeProperty('width');\n      $fill.style.removeProperty('right');\n      $fill.style.removeProperty('left');\n\n      if (!oneOnly) {\n        $fill.style.height = `${Math.abs(first - last)}%`;\n      }\n      else{\n        $fill.style.height = `${ first }%`;\n      }\n\n      if (bottomToTop) {\n        $fill.style.bottom = '0%';\n\n        if (!oneOnly) {\n          $fill.style.top = `${Math.min(100 - last, 100 - first)}%`;\n        }\n        else{\n          $fill.style.top = 'auto';\n        }\n      }\n      else {\n        $fill.style.bottom = 'auto';\n\n        if (!oneOnly) {\n          $fill.style.top = `${Math.min(first, last)}%`;\n        }\n        else{\n          $fill.style.top = '0%';\n        }\n      }\n    }\n    else {\n      $fill.style.removeProperty('height');\n      $fill.style.removeProperty('top');\n      $fill.style.removeProperty('bottom');\n\n      if (!oneOnly) {\n        $fill.style.width = `${ Math.abs(first - last) }%`;\n      }\n      else{\n        $fill.style.width = `${ first }%`;\n      }\n\n      if (rightToLeft) {\n        $fill.style.right = '0%';\n\n        if (!oneOnly) {\n          $fill.style.left = `${ Math.min(100 - last, 100 - first) }%`;\n        }\n        else{\n          $fill.style.left = 'auto';\n        }\n      }\n      else {\n        $fill.style.right = 'auto';\n\n        if (!oneOnly) {\n          $fill.style.left = `${ Math.min(first, last) }%`;\n        }\n        else{\n          $fill.style.left = '0%';\n        }\n      }\n    }\n  };\n\n  return {\n    updatePosition,\n  };\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = '--animate-onclick';\nexport const SliderWidth = '--width';\nexport const SliderHeight = '--height';\nexport const SliderRadius = '--panel-bg-border-radius';\n\nexport const SliderBg = '--panel-bg';\nexport const SliderBgHover = '--panel-bg-hover';\nexport const SliderBgFill = '--panel-bg-fill';\n\nexport const PointerWidth = '--pointer-width';\nexport const PointerHeight = '--pointer-height';\nexport const PointerRadius = '--pointer-border-radius';\nexport const PointerBg = '--pointer-bg';\nexport const PointerBgHover = '--pointer-bg-hover';\nexport const PointerBgFocus = '--pointer-bg-focus';\nexport const PointerShadow = '--pointer-shadow';\nexport const PointerShadowHover = '--pointer-shadow-hover';\nexport const PointerShadowFocus = '--pointer-shadow-focus';\nexport const PointerBorder = '--pointer-border';\nexport const PointerBorderHover = '--pointer-border-hover';\nexport const PointerBorderFocus = '--pointer-border-focus';\n", "import * as AttributesEnum from '../enums/attributes-enum';\nimport { getNumber } from './math-provider';\n\nexport const getAttributesByRegex = <T>($component: HTMLElement, regex: RegExp, parseValue?: (val: string) => T) : Map<number, T> => {\n\n  const map = new Map<number, T>();\n\n  for (const attr of $component.attributes) {\n    const valueProp = attr.nodeName.trim().toLowerCase();\n    const isValue = regex.test(valueProp);\n    if(!isValue) continue;\n\n    const key = valueProp.replace(/\\D/g, '').trim();\n    const keyNum = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n    const value = parseValue && typeof parseValue === 'function' ? parseValue(attr.value) : attr.value;\n    map.set(keyNum, value as T);\n  }\n\n  return map;\n};\n\nexport const getExternalCSSList = ($component: HTMLElement) => {\n  if(!$component) return null;\n\n  const str = $component.getAttribute(AttributesEnum.CSSLinks);\n  if(!str) return null;\n\n  const parts = str.split(';');\n  const cssList: string[] = [];\n\n  for(const part of parts){\n    if(part.trim() === '') continue;\n    cssList.push(part.trim());\n  }\n\n  return cssList;\n};", "import * as AttributesEnum from '../enums/attributes-enum';\nimport * as CSSVariables from '../enums/css-vars-enum';\nimport { IPointer } from './pointer';\nimport { getAttributesByRegex } from '../domain/common-provider';\n\nexport interface IStyles {\n\n  setStyle: (key: string, value: string | null | undefined, index: number) => void;\n  getStyle: (key: string, index: number) => string | undefined;\n\n  theme: string | null;\n  readonly pointerShapes: (string | null)[];\n  setPointerShape: (index: number, value: string | null) => void;\n}\n\nexport const stylePropertiesList: [string, string, string, RegExp | null][] = [\n  [CSSVariables.SliderWidth, AttributesEnum.SliderWidth, 'sliderWidth', null],\n  [CSSVariables.SliderHeight, AttributesEnum.SliderHeight, 'sliderHeight', null],\n  [CSSVariables.SliderRadius, AttributesEnum.SliderRadius, 'sliderRadius', null],\n\n  [CSSVariables.SliderBg, AttributesEnum.SliderBg, 'sliderBg', null],\n  [CSSVariables.SliderBgHover, AttributesEnum.SliderBgHover, 'sliderBgHover', null],\n  [CSSVariables.SliderBgFill, AttributesEnum.SliderBgFill, 'sliderBgFill', null],\n\n  [CSSVariables.PointerWidth, AttributesEnum.PointerWidth, 'pointer#Width', /^pointer([0-9]*)-width$/], // pointer-width, pointer2-width, ...\n  [CSSVariables.PointerHeight, AttributesEnum.PointerHeight, 'pointer#Height', /^pointer([0-9]*)-height$/], // pointer-height$, pointer2-height, ...\n  [CSSVariables.PointerRadius, AttributesEnum.PointerRadius, 'pointer#Radius', /^pointer([0-9]*)-radius$/], // pointer-radius, pointer2-radius, ...\n  [CSSVariables.PointerBg, AttributesEnum.PointerBg, 'pointer#Bg', /^pointer([0-9]*)-bg$/], // pointer-bg, pointer2-bg, ...\n  [CSSVariables.PointerBgHover, AttributesEnum.PointerBgHover, 'pointer#BgHover', /^pointer([0-9]*)-bg-hover$/], // pointer-bg-hover, pointer2-bg-hover, ...\n  [CSSVariables.PointerBgFocus, AttributesEnum.PointerBgFocus, 'pointer#BgFocus', /^pointer([0-9]*)-bg-focus$/], // pointer-bg-focus, pointer2-bg-focus, ...\n  [CSSVariables.PointerShadow, AttributesEnum.PointerShadow, 'pointer#Shadow', /^pointer([0-9]*)-shadow$/], // pointer-shadow, pointer2-shadow, ...\n  [CSSVariables.PointerShadowHover, AttributesEnum.PointerShadowHover, 'pointer#ShadowHover', /^pointer([0-9]*)-shadow-hover$/], // pointer-shadow-hover, pointer2-shadow-hover, ...\n  [CSSVariables.PointerShadowFocus, AttributesEnum.PointerShadowFocus, 'pointer#ShadowFocus', /^pointer([0-9]*)-shadow-focus$/], // pointer-shadow-focus, pointer2-shadow-focus, .\n  [CSSVariables.PointerBorder, AttributesEnum.PointerBorder, 'pointer#Border', /^pointer([0-9]*)-border$/], // pointer-border, pointer2-border, ...\n  [CSSVariables.PointerBorderHover, AttributesEnum.PointerBorderHover, 'pointer#BorderHover', /^pointer([0-9]*)-border-hover$/], // pointer-border-hover, pointer2-border-hover, ...\n  [CSSVariables.PointerBorderFocus, AttributesEnum.PointerBorderFocus, 'pointer#BorderFocus', /^pointer([0-9]*)-border-focus$/], // pointer-border-focus, pointer2-border-focus, ...\n];\n\nexport const Styles = ($component: HTMLElement, $slider: HTMLElement, pointers: IPointer[]) : IStyles => {\n\n  let theme: string | null = null;\n  const pointerShapes: (string | null)[] = [];\n  const stylesMap: Map<string, string> = new Map();\n\n  // ----- SETTERS ---------------------------\n\n  const removeClassesStartWith = (prefix: string, $element = $slider) => {\n    const classList = [...$element.classList];\n    for(const className of classList){\n      if(className.startsWith(prefix)){\n        $slider.classList.remove(className);\n      }\n    }\n  };\n\n  const removeClasses = () => {\n    // remove shape classes from $slider\n    removeClassesStartWith('shape');\n\n    // remove shape classes from pointers (if there are any)\n    const $pointers = $slider.querySelectorAll('.pointer');\n    for(const $pointer of $pointers){\n      removeClassesStartWith('shape', $pointer as HTMLElement);\n    }\n  };\n\n  const setTheme = (val: string | null) => {\n    theme = val;\n    removeClassesStartWith('theme-');\n\n    if(typeof val === 'string'){\n      $slider.classList.add(`theme-${ val }`);\n    }\n  };\n\n  const updatePointerShapes = () => {\n    removeClasses();\n\n    if(pointerShapes.length <= 0) return;\n\n    // first shape is added to the slider, as it should be applied on all pointers (potentially)\n    $slider.classList.add('shape', `shape-${ pointerShapes[0] }`);\n\n    // other shapes should be added to the relevant pointers each;\n    for(let i=1; i<pointerShapes.length; i++){\n      const item = pointerShapes[i];\n      if(!item) continue;\n\n      const $pointer = $slider.querySelector(`.pointer-${ i }`);\n      if(!$pointer) continue;\n\n      $pointer.classList.add('shape', `shape-${ item }`);\n    }\n  };\n\n  const setPointerShape = (index: number, value: string) => {\n    pointerShapes[index] = value;\n    updatePointerShapes();\n  };\n\n  const setPointerShapes = () => {\n\n    removeClasses();\n\n    // pointer-shape, pointer2-shape, ...\n    const list = getAttributesByRegex($component, /^pointer([0-9]*)-shape$/);\n    if(list.size <= 0) return;\n\n    // save shapes to the list that can be used for the getter APIs later\n    for(const item of list){\n      const index = item[0] as number;\n      pointerShapes[index] = item[1] as string;\n    }\n\n    updatePointerShapes();\n  };\n\n  const getKey = (key: string, index: number) => {\n    return `${ key }-${ index }`;\n  };\n\n  const setStyle = (key: string, value: string | null | undefined, index: number) => {\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    const $styleHolder = index === 0 ? $slider : pointer.$pointer;\n\n    if(value === null || value === undefined){\n      if(stylesMap.has(getKey(key, index))){\n        stylesMap.delete(getKey(key, index));\n      }\n      $styleHolder.style.removeProperty(key);\n      return;\n    }\n\n    stylesMap.set(getKey(key, index), value);\n    $styleHolder.style.setProperty(key, value);\n  };\n\n  const getStyle = (key: string, index: number) => {\n    return stylesMap.get(getKey(key, index));\n  };\n\n  // ---- initialization ---------------------\n  (() => {\n\n    for(const item of stylePropertiesList){\n\n      // '--pointer-width', 'pointer-width', 'pointerWidth', regex or null\n      const [cssVariableName, attrName, apiProperty, regex] = item;\n\n      // apply the styles via CSS variables;\n      // if index = 0 ---> apply the style on the whole slider, so all\n      // pointers will inherit it;\n      // otherwise, apply styles on the individual pointers;\n      if(regex){\n        const list = getAttributesByRegex($component, regex);\n        for(const item of list){\n          const index = item[0];\n          const value = item[1] as string;\n          setStyle(cssVariableName, value, index);\n        }\n      }\n      else{\n        const cssVariableValue = $component.getAttribute(attrName);\n        setStyle(cssVariableName, cssVariableValue, 0);\n      }\n\n      // add APIs --------------------------\n      const apiProperties: [string, number][] = [];\n\n      if(apiProperty.indexOf('#') === -1){\n        apiProperties.push([apiProperty, 0]);\n      }\n      else{\n        apiProperties.push([apiProperty.replace('#', ''), 0]);\n        apiProperties.push([apiProperty.replace('#', '0'), 0]);\n        apiProperties.push([apiProperty.replace('#', '1'), 0]);\n        for(let i=1; i<pointers.length; i++){\n          apiProperties.push([apiProperty.replace('#', (i + 1).toString()), i]);\n        }\n      }\n\n      for(const item of apiProperties){\n        try{\n          const propName = item[0];\n          const index = item[1];\n\n          if(!Object.prototype.hasOwnProperty.call($component, propName)){\n            Object.defineProperty($component, propName, {\n              get () {\n                return getStyle(cssVariableName, index);\n              },\n\n              set: (val) => {\n                setStyle(cssVariableName, val, index);\n              },\n            });\n          }\n        }\n        catch (ex){\n          console.error(ex);\n        }\n      }\n    }\n\n    setTheme($component.getAttribute(AttributesEnum.Theme));\n    setPointerShapes();\n  })();\n\n  return {\n    setStyle,\n    getStyle,\n\n    get theme() {\n      return theme;\n    },\n\n    set theme(val){\n      setTheme(val);\n    },\n\n    get pointerShapes() {\n      return pointerShapes;\n    },\n\n    setPointerShape,\n  };\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = 'animate-on-click';\nexport const RangeDragging = 'range-dragging';\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from './interfaces';\n\ndeclare global {\n  interface Window {\n    tcRangeSliderPlugins: (() => IPlugin)[];\n    tcRangeSliderObservedAttr: string[];\n  }\n}\n\nexport interface IPluginsManager {\n  init: () => void;\n\n  update: (data: IPluginUpdateData) => void;\n\n  onAttrChange: (attrName: string, newValue: string) =>  void;\n\n  destroy: () => void;\n}\n\nexport const PluginsManager = (\n  $component: HTMLElement,\n  requestUpdatePlugins: () => void,\n  setters: IPluginSetters,\n  getters: IPluginGetters,\n) : IPluginsManager => {\n\n  const plugins: IPlugin[] = [];\n\n  // ------ APIs ----------------------------\n\n  const update = (data: IPluginUpdateData) => {\n    for(const plugin of plugins){\n      if(plugin.update && typeof plugin.update === 'function'){\n        plugin.update(data);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for(const plugin of plugins){\n      if(plugin.destroy && typeof plugin.destroy === 'function'){\n        plugin.destroy();\n      }\n    }\n  };\n\n  const onAttrChange = (_attrName: string, _newValue: string) => {\n    for(const plugin of plugins){\n      if(plugin.onAttrChange && typeof plugin.onAttrChange === 'function'){\n        plugin.onAttrChange(\n          _attrName,\n          _newValue\n        );\n      }\n    }\n  };\n\n  const defineSettersGetters = (plugin: IPlugin) => {\n    if(!plugin.gettersAndSetters) return;\n\n    for(const item of plugin.gettersAndSetters){\n      if(!item.name || !item.attributes) continue;\n\n      try{\n        if(!Object.prototype.hasOwnProperty.call($component, item.name)){\n          Object.defineProperty($component, item.name, item.attributes);\n        }\n      }\n      catch (ex){\n        console.error('defineSettersGetters error:', ex);\n      }\n    }\n  };\n\n  const initStyles = (plugin: IPlugin) => {\n    if(!plugin.css) return;\n\n    const $style = $component.shadowRoot?.querySelector('style');\n    if(!$style) return;\n\n    $style.innerHTML += plugin.css;\n  };\n\n  // ------ initialization ------------------\n  const init = () => {\n    if(!window.tcRangeSliderPlugins) return;\n\n    for(const pluginFunc of window.tcRangeSliderPlugins){\n      const plugin = pluginFunc();\n      plugins.push(plugin);\n\n      if(plugin.init && typeof plugin.init === 'function'){\n\n        // call plugin initialization function\n        plugin.init(\n          $component,\n          requestUpdatePlugins,\n          setters,\n          getters,\n        );\n\n        // if plugin has getters and setters that used for APIs ---> define them\n        defineSettersGetters(plugin);\n\n        // if plugin has css rules defined as plain text ---> they can be added dynamically\n        initStyles(plugin);\n      }\n    }\n  };\n\n  return {\n    init,\n    update,\n    onAttrChange,\n    destroy,\n  };\n};", "import { getNumber, isNumber } from './math-provider';\nimport { IPointer, Pointer } from '../ui/pointer';\nimport { ISlider } from '../ui/slider';\n\nexport const MAX_VALUES_API = 10;\nexport const POINTER_Z_INDEX_DEFAULT = 20;\n\nexport const initPointers = ($component: HTMLElement, $pointer: HTMLElement) => {\n  const map = new Map<number, number | string>();\n  const regex = /^value([0-9]*)$/;\n\n  // collect data about key / value pairs: value=50, value2=70, etc.\n  // value = value0 = value1 (all these are aliases of each other)\n  for (const attr of $component.attributes) {\n    const valueProp = attr.nodeName.trim().toLowerCase();\n    const isValue = regex.test(valueProp);\n    if(!isValue) continue;\n\n    const key = valueProp.replace('value', '').trim();\n    const keyNum = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n    const value = isNumber(attr.value) ? getNumber(attr.value, 0) : attr.value;\n\n    map.set(keyNum, value);\n  }\n\n  // find the max value number in the map\n  const max = Math.max(...Array.from(map.keys()));\n  const pointers: [IPointer, string | number | undefined][] = [];\n\n  // first pointer always exists\n  pointers.push([Pointer($component, $pointer, 0), map.get(0)]);\n\n  // add all other pointers\n  let $latestPointer = $pointer;\n\n  for(let i=1; i<=max; i++){\n    const $newPointer = $pointer.cloneNode(true) as HTMLElement;\n    $latestPointer.after($newPointer);\n\n    $latestPointer = $newPointer;\n    pointers.push([Pointer($component, $newPointer, i), map.get(i)]);\n  }\n\n  return pointers;\n};\n\nexport const initPointerAPI = (\n  $component: HTMLElement,\n  slider: ISlider,\n  index: number,\n  valueProp: string,\n  ariaLabelProp: string,\n  pointerShapeProp: string,\n  pointerDisabledProp: string\n) => {\n\n  try{\n\n    // `value${ index + 1 }`: value, value0, value1, value2, etc.\n    Object.defineProperty($component, valueProp, {\n      configurable: true,\n      get () {\n        if(!slider) return undefined;\n\n        const pointer = slider.pointers[index];\n        if(!pointer) return undefined;\n\n        const val = slider.getTextValue(pointer.percent);\n        return isNumber(val) ? getNumber(val, val) : val;\n      },\n\n      set: (val) => {\n        const pointer = slider.pointers[index];\n        if(!pointer){\n          slider?.addPointer(val);\n        }\n        else{\n          slider?.setValue(val, index);\n        }\n      },\n    });\n\n    // `ariaLabel${ index + 1 }`\n    Object.defineProperty($component, ariaLabelProp, {\n      configurable: true,\n      get () {\n        return slider?.pointers[index]?.getAttr('aria-label') ?? undefined;\n      },\n\n      set: (val) => {\n        if(!slider) return;\n        slider.setAriaLabel(index, val);\n      },\n    });\n\n    // `pointerShape${ index + 1 }`\n    Object.defineProperty($component, pointerShapeProp, {\n      configurable: true,\n      get () {\n        return slider?.styles?.pointerShapes[index] ?? null;\n      },\n\n      set: (val) => {\n        if(!slider || !slider.styles) return;\n        slider.styles.setPointerShape(index, val);\n      },\n    });\n\n    // `pointer${ index + 1 }Disabled`\n    Object.defineProperty($component, pointerDisabledProp, {\n      configurable: true,\n      get () {\n        return slider?.pointers[index].disabled ?? false;\n      },\n\n      set: (val) => {\n        if(!slider) return;\n\n        const pointer = slider?.pointers[index];\n        if(!pointer) return;\n\n        pointer.disabled = val;\n      },\n    });\n  }\n  catch (ex){\n    console.error(ex);\n  }\n};\n\nexport const initPointerAPIs = ($component: HTMLElement, slider: ISlider) => {\n\n  const apiProperties: [string, string, string, string, number][] = [\n    ['value', 'ariaLabel', 'pointerShape', 'pointerDisabled', 0],\n    ['value0', 'ariaLabel0', 'pointerShape0', 'pointer0Disabled', 0],\n    ['value1', 'ariaLabel1', 'pointerShape1', 'pointer1Disabled', 0],\n  ];\n\n  // The maximum number of such pointers is determined by the MAX_VALUES_API API constant (for performance reasons).\n  // https://github.com/mzusin/toolcool-range-slider/issues/2\n  for(let i=2; i<MAX_VALUES_API; i++){\n    apiProperties.push([`value${ i }`, `ariaLabel${ i }`, `pointer${ i }Shape`, `pointer${ i }Disabled`, i - 1]);\n  }\n\n  for(const item of apiProperties){\n    initPointerAPI($component,\n      slider,\n      item[4],\n      item[0],\n      item[1],\n      item[2],\n      item[3]\n    );\n  }\n\n};\n\nexport const changePointersOrder = (pointers: IPointer[], isDesc: boolean, $component: HTMLElement) => {\n\n  const $container = $component.shadowRoot?.querySelector('.container') as HTMLElement\n  if(!$container) return;\n\n  for(const pointer of pointers){\n    if(isDesc){\n      $container.prepend(pointer.$pointer);\n    }\n    else{\n      $container.append(pointer.$pointer);\n    }\n  }\n};\n\n/**\n * Set greater z-index only to the active pointer.\n * https://github.com/mzusin/toolcool-range-slider/issues/15\n */\nexport const setZIndex = (pointers: IPointer[], selectedPointer: IPointer | null | undefined) => {\n  if(!selectedPointer || pointers.length <= 1) return;\n\n  for(const pointer of pointers) {\n    pointer.$pointer.style.zIndex = POINTER_Z_INDEX_DEFAULT.toString();\n  }\n\n  selectedPointer.$pointer.style.zIndex = (POINTER_Z_INDEX_DEFAULT * 2).toString();\n};\n", "import { IPointer, Pointer } from './pointer';\nimport { convertRange, getBoolean, getNumber, isNumber, roundToStep, setDecimalPlaces } from '../domain/math-provider';\nimport * as AttributesEnum from '../enums/attributes-enum';\nimport { TData, TStep } from '../types';\nimport { findValueIndexInData, parseData } from '../dal/data-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { IPanelFill, PanelFill } from './panel-fill';\nimport { sendChangeEvent, sendMouseDownEvent, sendMouseUpEvent } from '../domain/events-provider';\nimport { IStyles, Styles } from './styles';\nimport * as CSSVariables from '../enums/css-vars-enum';\nimport * as CssClasses from '../enums/css-classes-enum';\nimport { getAttributesByRegex } from '../domain/common-provider';\nimport { IPluginsManager, PluginsManager } from '../plugins/plugins-manager';\nimport { changePointersOrder, setZIndex } from '../domain/pointers-provider';\n\nexport interface ISlider {\n  readonly pointers: IPointer[];\n  readonly styles: IStyles | null;\n  readonly pluginsManager: IPluginsManager | null;\n\n  pointersOverlap: boolean;\n  pointersMinDistance: number;\n  pointersMaxDistance: number;\n  rangeDragging: boolean;\n\n  readonly min: number | string;\n  readonly max: number | string;\n  readonly step: TStep;\n  readonly data: TData;\n\n  type: string;\n  rightToLeft: boolean;\n  bottomToTop: boolean;\n  disabled: boolean;\n  keyboardDisabled: boolean;\n  mousewheelDisabled: boolean;\n  round: number;\n  animateOnClick: string | undefined | boolean;\n\n  getAriaLabel: (index: number) => (string | undefined);\n  setAriaLabel: (index: number, ariaLabel: string | undefined) => void;\n\n  setMin: (value: number | string | undefined | null) => void;\n  setMax: (value: number | string | undefined | null) => void;\n  setValue: (value: number | string | undefined | null, index: number) => void;\n  setStep: (value: TStep | string) => void;\n  setData: (value: TData | string | null | number) => void;\n  getTextValue: (_percent: number | undefined) => undefined | string | number;\n\n  addPointer: (value: number | string | undefined | null) => number;\n  removePointer: () => number;\n\n  destroy: () => void;\n}\n\nexport const MIN_DEFAULT = 0;\nexport const MAX_DEFAULT = 100;\nexport const ROUND_DEFAULT = 2;\nexport const ANIMATE_ON_CLICK_DEFAULT = '0.3s';\n\nexport const Slider = ($component: HTMLElement, $slider: HTMLElement, pointersList: [IPointer, string | number | undefined][]) : ISlider => {\n\n  const pointers = pointersList.map(item => item[0]);\n  let selectedPointer: IPointer | null | undefined = null;\n  let panelFill: IPanelFill | null = null;\n  let styles: IStyles | null = null;\n  let pluginsManager: IPluginsManager | null = null;\n\n  let min = MIN_DEFAULT;\n  let max = MAX_DEFAULT;\n  let step: TStep = undefined; // step is defined in absolute units (not percent!)\n  let data: TData = undefined;\n  let type: string = TypeEnum.Horizontal;\n  let round: number = ROUND_DEFAULT;\n  let rightToLeft = false;\n  let bottomToTop = false;\n\n  let pointersOverlap = false;\n  let pointersMinDistance = 0;\n  let pointersMaxDistance = Infinity;\n\n  let rangeDragging = false;\n\n  let rangeDraggingStart: number | undefined = undefined;\n  let rangeDraggingDiff: number | undefined = undefined;\n\n  let disabled = false;\n  let keyboardDisabled = false;\n  let mousewheelDisabled = false;\n  let animateOnClick: string | undefined = ANIMATE_ON_CLICK_DEFAULT;\n\n  let eventName: 'mousedown' | 'mouseup' | 'mousemove' | 'wheel' | 'touchemove' | 'touchstart' | string |undefined = undefined\n  let touchClientX: number;\n  let touchClientY: number;\n\n  const ariaLabels: (string | undefined)[] = [];\n\n  // -------------- EVENTS --------------------\n\n  const onMouseDown = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    }\n\n    onValueChange(evt);\n\n    window.addEventListener('mousemove', onValueChange);\n    window.addEventListener('mouseup', onMouseUp);\n\n    sendMouseDownEvent($component, evt);\n  };\n\n  const onMouseUp = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    rangeDraggingStart = undefined;\n    rangeDraggingDiff = undefined;\n\n    onValueChange(evt);\n\n    window.removeEventListener('mousemove', onValueChange);\n    window.removeEventListener('mouseup', onMouseUp);\n\n    if(animateOnClick){\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n\n    sendMouseUpEvent($component, evt);\n  };\n\n  const getActivePointer = ($target: HTMLElement, percent: number) => {\n    if(pointers.length <= 0) return;\n\n    // if only 1 pointer exists --> return it\n    if(pointers.length === 1){\n      if(pointers[0].isClicked($target) && animateOnClick){\n        $slider.classList.remove(CssClasses.AnimateOnClick);\n      }\n\n      return pointers[0];\n    }\n\n    const panelFillClicked = isPanelFillClicked($target);\n\n    if(rangeDragging){\n\n      let _dragPercent = percent;\n      const stepPercent = getStepPercent(_dragPercent);\n      if(stepPercent !== undefined){\n        _dragPercent = roundToStep(_dragPercent, stepPercent);\n      }\n\n      if(panelFillClicked){\n        rangeDraggingStart = _dragPercent;\n        rangeDraggingDiff = 0;\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n      }\n      else{\n        if(rangeDraggingStart !== undefined){\n          rangeDraggingDiff = _dragPercent - rangeDraggingStart;\n          rangeDraggingStart = _dragPercent;\n        }\n      }\n    }\n\n    if(!isPanelClicked($target) && !panelFillClicked){\n      // if clicked directly on 1 of the pointers ---> return it\n      for(const pointer of pointers){\n        if(!pointer.isClicked($target) || pointer.disabled) continue;\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n\n        return pointer;\n      }\n\n      // if already selected pointer ---> return it\n      for(const pointer of pointers){\n        if(selectedPointer === pointer) return pointer;\n      }\n    }\n\n    // find the closest pointer and return it\n    let minDistance = Infinity;\n    let minDistancePointer = null;\n\n    for(const pointer of pointers){\n      if(pointer.disabled) continue;\n\n      const distance = Math.abs(percent - pointer.percent);\n      if(distance < minDistance){\n        minDistance = distance;\n        minDistancePointer = pointer;\n      }\n    }\n\n    return minDistancePointer;\n  };\n\n  const getSelectedPointerIndex = () => {\n    return pointers.findIndex(pointer => selectedPointer === pointer && !pointer.disabled);\n  };\n\n  const onValueChange = (evt: MouseEvent | TouchEvent) => {\n    setEventType(evt.type);\n\n    if (evt instanceof TouchEvent && evt.touches[0]) {\n      touchClientX = evt.touches[0].clientX;\n    }\n\n    if (evt instanceof TouchEvent && evt.touches[0]) {\n      touchClientY = evt.touches[0].clientY;\n    }\n\n    // find the percent [0, 100] of the current mouse position in vertical or horizontal slider\n    let percent;\n\n    if(type === TypeEnum.Vertical){\n      const { height: boxHeight, top: boxTop } = $slider.getBoundingClientRect();\n      const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : touchClientY;\n      const top = Math.min(Math.max(0, mouseY - boxTop), boxHeight);\n      percent = (top * 100) / boxHeight;\n    }\n    else{\n      const { width: boxWidth, left: boxLeft } = $slider.getBoundingClientRect();\n      const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : touchClientX;\n      const left = Math.min(Math.max(0, mouseX - boxLeft), boxWidth);\n      percent = (left * 100) / boxWidth;\n    }\n\n    if(rightToLeft || bottomToTop){\n      percent = 100 - percent;\n    }\n\n    selectedPointer = getActivePointer(evt.target as HTMLElement, percent);\n\n    if(selectedPointer) {\n      // https://github.com/mzusin/toolcool-range-slider/issues/15\n      setZIndex(pointers, selectedPointer);\n    }\n\n    // handle range dragging\n    if(rangeDragging && pointers.length > 1 && rangeDraggingDiff !== undefined){\n\n      const firstPointer = pointers[0];\n      const lastPointer = pointers[pointers.length - 1];\n\n      const firstSmallerThanMin = firstPointer.percent + rangeDraggingDiff < 0;\n      const lastGreaterThanMax = lastPointer.percent + rangeDraggingDiff > 100;\n      if(firstSmallerThanMin || lastGreaterThanMax) return;\n\n      for(let i=0; i<pointers.length; i++){\n        setPositions(i, pointers[i].percent + rangeDraggingDiff);\n      }\n\n      return;\n    }\n\n    const foundIndex = getSelectedPointerIndex();\n\n    if(foundIndex !== -1){\n      setPositions(foundIndex, percent);\n      selectedPointer?.$pointer.focus();\n    }\n  };\n\n  const pointerMouseWheel = (evt: WheelEvent) => {\n    setEventType(evt.type);\n\n    if (disabled ||\n      document.activeElement !== $component ||\n      selectedPointer?.disabled) return;\n\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const scrollTop = evt.deltaY < 0;\n    const rightOrBottom = rightToLeft || bottomToTop;\n    const shouldGoPrev = scrollTop ? !rightOrBottom : rightOrBottom;\n\n    const foundIndex = getSelectedPointerIndex();\n    if(foundIndex === -1) return;\n\n    if(shouldGoPrev){\n      goPrev(foundIndex, pointers[foundIndex].percent);\n    }\n    else{\n      goNext(foundIndex, pointers[foundIndex].percent);\n    }\n  };\n\n  // -------------- Arrows --------------------\n\n  const arrowLeft = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n  };\n\n  const arrowRight = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n  };\n\n  const arrowUp = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go forwards\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n  };\n\n  const arrowDown = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n  };\n\n  // -------------- Helpers ------------------------\n\n  const isPanelClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel');\n  };\n\n  const isPanelFillClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel-fill');\n  };\n\n  const goPrev = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let stepPercent = getStepPercent(_percent);\n\n    if(stepPercent == undefined){\n      stepPercent = 1;\n    }\n\n    _percent -= stepPercent;\n\n    if(_percent < 0){\n      _percent = 0;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const goNext = (index: number, _percent: number | undefined) => {\n\n    if(_percent === undefined) return;\n\n    let stepPercent = getStepPercent(_percent);\n\n    if(stepPercent == undefined){\n      stepPercent = 1;\n    }\n\n    _percent += stepPercent;\n\n    if(_percent > 100){\n      _percent = 100;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const updatePlugins = () => {\n\n    if(!pluginsManager) return;\n    pluginsManager.update({\n      percents: getPercents(),\n      values: getValues(),\n      $pointers: getPointerElements(),\n\n      min: getNumericMin(),\n      max: getNumericMax(),\n\n      data: getData(),\n      step: getStep(),\n      round: getRound(),\n      type: getType(),\n\n      textMin: getMin(),\n      textMax: getMax(),\n\n      rightToLeft: isRightToLeft(),\n      bottomToTop: isBottomToTop(),\n\n      pointersOverlap: isPointersOverlap(),\n      pointersMinDistance: getPointersMinDistance(),\n      pointersMaxDistance: getPointersMaxDistance(),\n      rangeDragging: isRangeDraggingEnabled(),\n\n      disabled: isDisabled(),\n      keyboardDisabled: isKeyboardDisabled(),\n      mousewheelDisabled: isMousewheelDisabled(),\n    });\n  };\n\n  const requestUpdatePlugins = () => {\n    updatePlugins();\n  };\n\n  // -------------- Getters --------------------\nconst getEventType = () => {\n  return eventName;\n}\n\n  const getPointerLeftWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === 0){\n      // by default 0, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n    else{\n      // by default previous pointer, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n  };\n\n  const getPointerRightWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === pointers.length - 1){\n      // by default 100, but if min distance between pointers is defined --->\n      // then the distance to the previous pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n    else{\n      // distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n  };\n\n  /**\n   * user step is defined in absolute values;\n   * this function return it as %\n   */\n  const getStepPercent = (_percent: number) => {\n\n    let _step: number | undefined | null;\n\n    if(typeof step === 'function'){\n      // convert percent to value: [0, 100] to [min, max]\n      const currentValue = convertRange(0, 100, min, max, _percent);\n\n      // the slider function provided by user should return an absolute value, not %\n      _step = step(currentValue, _percent);\n    }\n    else{\n      // the step value provided by the user should be absolute value (not %), undefined, or null\n      _step = step;\n    }\n\n    // round percent to step\n    if(isNumber(_step)){\n\n      /*\n      min ......... max (step = 1)\n      0 ........... 100 (step = ?)\n\n      (max - min) ....... step (=1)\n      100 ............... ?\n\n      ? = 100 * step / (max - min)\n      */\n\n      const diff = max - min;\n      _step = diff === 0 ? 0 :  (_step as number) * 100 / diff;\n\n      return _step;\n    }\n\n    return undefined;\n  };\n\n  const getTextValue = (_percent: number | undefined) => {\n    if(_percent === undefined) return undefined;\n\n    const val = convertRange(0, 100, min, max, _percent);\n\n    if(data !== undefined){\n      return data[Math.round(val)];\n    }\n\n    return setDecimalPlaces(val, round);\n  };\n\n  const getMin = () => {\n\n    if(data !== undefined){\n      return data[min];\n    }\n\n    return min;\n  };\n\n  const getMax = () => {\n\n    if(data !== undefined){\n      return data[max];\n    }\n\n    return max;\n  };\n\n  const getStep = () => {\n    return step;\n  };\n\n  const getPointerMin = (index: number) => {\n    if(index <= 0 || pointersOverlap) return getMin();\n    return getTextValue(pointers[index - 1].percent) ?? '';\n  };\n\n  const getPointerMax = (index: number) => {\n    if(pointers.length <= 1 ||\n      index >= pointers.length - 1 ||\n      pointersOverlap) return getMax();\n\n    return getTextValue(pointers[index + 1].percent) ?? '';\n  };\n\n  const getPercents = () => {\n    return pointers.map(pointer => pointer.percent);\n  };\n\n  const getValues = () => {\n    return pointers.map(pointer => getTextValue(pointer.percent));\n  }\n\n  const getPointerElements = () => {\n    return pointers.map(pointer => pointer.$pointer);\n  };\n\n  const getNumericMin = () => {\n    return min;\n  };\n\n  const getNumericMax = () => {\n    return max;\n  };\n\n  const getData = () => {\n    return data;\n  };\n\n  const getType = () => {\n    return type;\n  };\n\n  const getRound = () => {\n    return round;\n  };\n\n  const getPointersMinDistance = () => {\n    return pointersMinDistance;\n  };\n\n  const getPointersMaxDistance = () => {\n    return pointersMaxDistance;\n  };\n\n  const getAriaLabel = (index: number) => {\n    return ariaLabels[index];\n  };\n\n  const isRightToLeft = () => {\n    return rightToLeft;\n  };\n\n  const isBottomToTop = () => {\n    return bottomToTop;\n  };\n\n  const isDisabled = () => {\n    return disabled;\n  };\n\n  const isKeyboardDisabled = () => {\n    return keyboardDisabled;\n  };\n\n  const isMousewheelDisabled = () => {\n    return mousewheelDisabled;\n  };\n\n  const isPointersOverlap = () => {\n    return pointersOverlap;\n  };\n\n  const isRangeDraggingEnabled = () => {\n    return rangeDragging;\n  };\n\n  // -------------- Setters --------------------\n\n  const setEventType = (_eventName: string) => {\n    eventName = _eventName;\n  }\n  const setPositions = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    // round percent to step\n    const stepPercent = getStepPercent(_percent);\n\n    if(stepPercent !== undefined){\n      _percent = roundToStep(_percent, stepPercent);\n    }\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    const percentChanged = pointer.updatePosition(_percent, getPointerLeftWall(index), getPointerRightWall(index), type, rightToLeft, bottomToTop);\n    panelFill?.updatePosition(type, pointers.map(pointer => pointer.percent), rightToLeft, bottomToTop);\n\n    updatePlugins();\n\n    for(const pointer of pointers){\n      const valueText = getTextValue(pointer.percent);\n      if(valueText !== undefined){\n        pointer.setAttr('aria-valuenow', valueText.toString());\n        pointer.setAttr('aria-valuetext', valueText.toString());\n      }\n    }\n\n    setAriaMinMax();\n\n    if(percentChanged){\n      sendChangeEvent($component, pointers.map(pointer => getTextValue(pointer.percent)));\n    }\n  };\n\n  const setAllPositions = () => {\n    for(let i=0; i<pointers.length; i++){\n      setPositions(i, pointers[i].percent);\n    }\n  };\n\n  /**\n   * on component init, min and max should be initialized together\n   * because their validations depend on each other;\n   */\n  const setMinMax = (_min: number | string | undefined | null, _max: number | string | undefined | null) => {\n\n    min = data !== undefined ? 0 : getNumber(_min, MIN_DEFAULT);\n    max = data !== undefined ? data.length - 1 : getNumber(_max, MAX_DEFAULT);\n\n    // perform validations\n    setMin(min);\n    setMax(max);\n  };\n\n  const setAriaMinMax = () => {\n    for(let i=0; i<pointers.length; i++){\n      const pointer = pointers[i];\n      pointer.setAttr('aria-valuemin', (getPointerMin(i) ?? '').toString());\n      pointer.setAttr('aria-valuemax', (getPointerMax(i) ?? '').toString());\n    }\n  };\n\n  const setMin = (_min: number | string | undefined | null) => {\n    min = getNumber(_min, MIN_DEFAULT);\n\n    if(min > max){\n      max = min + MAX_DEFAULT;\n    }\n\n    setAllPositions();\n  };\n\n  const setMax = (_max: number | string | undefined | null) => {\n\n    max = getNumber(_max, MAX_DEFAULT);\n\n    if(max < min){\n      max = min + MAX_DEFAULT;\n    }\n\n    setAllPositions();\n  };\n\n  const setValues = (values: (number | string | undefined)[]) => {\n\n    // initial values should be initialized together\n    // because their validations may depend on each other;\n\n    // init initial values with pointers overlap ----------\n    pointersOverlap = true;\n\n    for(let i=0; i<values.length; i++){\n      setValue(values[i], i);\n    }\n\n    pointersOverlap = false;\n\n    // add all required validations ------------------------\n    for(let i=0; i<values.length; i++){\n      setValue(values[i], i);\n    }\n  };\n\n  const setValue = (_val: number | string | undefined | null, index: number) => {\n\n    let val: number;\n\n    if(data !== undefined){\n\n      val = (_val === undefined || _val === null) ? 0 : findValueIndexInData(_val, data);\n      if(val === -1){\n        val = 0;\n      }\n    }\n    else{\n      val = getNumber(_val, min);\n\n      if(val < min){\n        val = min;\n      }\n\n      if(val > max){\n        val = max;\n      }\n    }\n\n    // scale a range [min,max] to [a,b]\n    const percent = convertRange(min, max, 0, 100, val);\n\n    setPositions(index, percent);\n  };\n\n  const setStep = (_step: TStep | string) => {\n    if(_step === null || _step === undefined){\n      step = undefined;\n      return;\n    }\n\n    if (typeof _step === 'function') {\n      step = _step;\n      setAllPositions();\n      return;\n    }\n\n    if(isNumber(_step)){\n      step = getNumber(_step, 1);\n\n      const diff = Math.abs(max - min);\n      if (step > diff) {\n        step = undefined;\n      }\n\n      setAllPositions();\n      return;\n    }\n\n    step = undefined;\n  };\n\n  const setPointersOverlap = (_pointersOverlap: boolean) => {\n    pointersOverlap = _pointersOverlap;\n    setAllPositions();\n  };\n\n  const setPointersMinDistance = (_pointersMinDistance: number) => {\n    if(!isNumber(_pointersMinDistance) || _pointersMinDistance < 0){\n      _pointersMinDistance = 0;\n    }\n    pointersMinDistance = _pointersMinDistance;\n  };\n\n  const setPointersMaxDistance = (_pointersMaxDistance: number) => {\n    if(!isNumber(_pointersMaxDistance) || _pointersMaxDistance < 0){\n      _pointersMaxDistance = Infinity;\n    }\n    pointersMaxDistance = _pointersMaxDistance;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $slider.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $slider.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($slider.hasAttribute('aria-disabled')) {\n        $slider.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setKeyboardDisabled = (_disabled: boolean) => {\n    keyboardDisabled = _disabled;\n  };\n\n  const setMousewheelDisabled = (_disabled: boolean) => {\n    mousewheelDisabled = _disabled;\n\n    if(mousewheelDisabled){\n      document.removeEventListener('wheel', pointerMouseWheel);\n    }\n    else{\n      document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n    }\n  };\n\n  const setData = (_data: TData | string | number | null) => {\n\n    if(_data === null || _data === undefined){\n      data = undefined;\n      return;\n    }\n\n    data = parseData(_data as string);\n    if(data === undefined || data.length <= 0){\n      data = undefined;\n      return;\n    }\n\n    setMin(0);\n    setMax(data.length - 1);\n\n    if(step === undefined){\n      setStep(1);\n    }\n  };\n\n  const setType = (_type: string | null | undefined) => {\n\n    if(typeof _type === 'string'){\n      type = _type.trim().toLowerCase() === TypeEnum.Vertical ? TypeEnum.Vertical : TypeEnum.Horizontal;\n    }\n    else{\n      type = TypeEnum.Horizontal;\n    }\n\n    const $box = $component.shadowRoot?.querySelector('.range-slider-box');\n    if(!$box) return;\n    $box.className = `range-slider-box type-${ type }`;\n\n    setAllPositions();\n\n    // update accessibility properties\n    const aria = type === TypeEnum.Vertical ? 'vertical' : 'horizontal';\n    for(const pointer of pointers){\n      pointer.setAttr('aria-orientation', aria);\n    }\n  };\n\n  const setRightToLeft = (_rightToLeft: boolean) => {\n    rightToLeft = _rightToLeft;\n\n    if(pointers.length > 1){\n      changePointersOrder(pointers, rightToLeft, $component);\n    }\n\n    setAllPositions();\n    updatePlugins();\n  };\n\n  const setBottomToTop = (_bottomToTop: boolean) => {\n    bottomToTop = _bottomToTop;\n\n    if(pointers.length > 1){\n      changePointersOrder(pointers, bottomToTop, $component);\n    }\n\n    setAllPositions();\n    updatePlugins();\n  };\n\n  const setRound = (_round: number) => {\n    round = getNumber(_round, ROUND_DEFAULT);\n\n    if(round < 0){\n      round = ROUND_DEFAULT;\n    }\n\n    updatePlugins();\n  };\n\n  const setAnimateOnClick = (_animateOnClick: string | boolean | null | undefined) => {\n    if(_animateOnClick === null ||\n      _animateOnClick === undefined ||\n      _animateOnClick.toString().trim().toLowerCase() === 'false'){\n      animateOnClick = undefined;\n      $slider.style.removeProperty(CSSVariables.AnimateOnClick);\n      $slider.classList.remove(CssClasses.AnimateOnClick);\n    }\n    else{\n      animateOnClick = _animateOnClick.toString();\n      $slider.style.setProperty(CSSVariables.AnimateOnClick, animateOnClick);\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n  };\n\n  const setAriaLabel = (index: number, _ariaLabel: string | undefined) => {\n\n    const pointer = pointers[index];\n    if(!pointer) return;\n\n    pointer.setAttr('aria-label', _ariaLabel);\n    ariaLabels[index] = _ariaLabel;\n  };\n\n  const setRangeDragging = (_rangeDragging: boolean) => {\n    rangeDraggingStart = undefined;\n\n    if(pointers.length <= 1){\n      rangeDragging = false;\n      $slider.classList.remove(CssClasses.RangeDragging);\n      return;\n    }\n\n    rangeDragging = _rangeDragging;\n    $slider.classList.toggle(CssClasses.RangeDragging, rangeDragging);\n  };\n\n  // initialization -------------------------------------\n\n  const initDisabled = () => {\n    setDisabled(getBoolean($component.getAttribute(AttributesEnum.Disabled)));\n    keyboardDisabled = getBoolean($component.getAttribute(AttributesEnum.KeyboardDisabled));\n    mousewheelDisabled = getBoolean($component.getAttribute(AttributesEnum.MousewheelDisabled));\n\n    // handle 'pointer1-disabled, pointer2-disabled, etc.\n    const disabledList = getAttributesByRegex($component, /^pointer([0-9]*)-disabled$/, (val: string) => {\n      return getBoolean(val);\n    });\n\n    for(const item of disabledList){\n      const pointerIndex = item[0];\n      if(!pointers[pointerIndex]) continue;\n      pointers[pointerIndex].disabled = item[1];\n    }\n  };\n\n  const initAriaLabels = () => {\n    // handle 'aria-label1', 'aria-label2', etc.\n    const ariaLabelsList = getAttributesByRegex($component, /^aria-label([0-9]*)$/);\n\n    for(const item of ariaLabelsList){\n      const index = item[0];\n      setAriaLabel(index, item[1] as string);\n    }\n  };\n\n  // add pointer - always to the end\n  const addPointer = (value: string | number | undefined) => {\n    const len = pointers.length;\n    const $latestPointer = pointers[len - 1].$pointer;\n\n    const $newPointer = $latestPointer.cloneNode(true) as HTMLElement;\n    $latestPointer.after($newPointer);\n    const newPointer = Pointer($component, $newPointer, len);\n\n    newPointer.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    pointers.push(newPointer);\n\n    setValue(value, len);\n    setAllPositions();\n    updatePlugins();\n\n    return len;\n  };\n\n  // always from the end\n  const removePointer = () => {\n    const len = pointers.length;\n    const pointer = pointers[len - 1];\n    if(!pointer) return -1;\n\n    pointer.destroy();\n    pointers.pop();\n\n    if(pointers.length <= 1){\n      setRangeDragging(false);\n    }\n\n    setAllPositions();\n    updatePlugins();\n\n    return len - 1;\n  };\n\n  (() => {\n\n    // init pointer callbacks for arrow keys\n    for(const pointer of pointers){\n      pointer.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    }\n\n    // init panel fill\n    const $fill = $component.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n    if($fill){\n      panelFill = PanelFill($fill);\n    }\n\n    // init main properties from HTML attributes\n    setType($component.getAttribute(AttributesEnum.Type));\n    setRightToLeft(getBoolean($component.getAttribute(AttributesEnum.RightToLeft)));\n    setBottomToTop(getBoolean($component.getAttribute(AttributesEnum.BottomToTop)));\n\n    setMinMax($component.getAttribute(AttributesEnum.Min), $component.getAttribute(AttributesEnum.Max));\n    setStep($component.getAttribute(AttributesEnum.Step));\n    setData($component.getAttribute(AttributesEnum.Data));\n\n    // set value and render the pointers ----------------------\n    setValues(pointersList.map(item => item[1]));\n\n    // overlaps MUST be defined after the pointer values\n    setPointersOverlap(getBoolean($component.getAttribute(AttributesEnum.PointersOverlap)));\n    setPointersMinDistance(getNumber($component.getAttribute(AttributesEnum.PointersMinDistance), 0));\n    setPointersMaxDistance(getNumber($component.getAttribute(AttributesEnum.PointersMaxDistance), Infinity));\n    setRangeDragging(getBoolean($component.getAttribute(AttributesEnum.RangeDragging)));\n\n    // additional properties -----------------------------\n    setRound(getNumber($component.getAttribute(AttributesEnum.Round), ROUND_DEFAULT));\n    initDisabled();\n    initAriaLabels();\n\n    // init styles ---------\n    styles = Styles($component, $slider, pointers);\n    setAnimateOnClick($component.getAttribute(AttributesEnum.AnimateOnClick) ?? ANIMATE_ON_CLICK_DEFAULT);\n\n    // init slider events -------------------------------------\n    $slider.addEventListener('mousedown', onMouseDown);\n    $slider.addEventListener('mouseup', onMouseUp);\n    $slider.addEventListener('touchmove', onValueChange);\n    $slider.addEventListener('touchstart', onValueChange);\n    $slider.addEventListener('touchend', onValueChange);\n\n    if(!mousewheelDisabled){\n      document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n    }\n\n    // init plugins ---------------\n    pluginsManager = PluginsManager(\n      $component,\n      requestUpdatePlugins,\n      {\n        setValues,\n        setMin,\n        setMax,\n        setStep,\n        setPointersOverlap,\n        setPointersMinDistance,\n        setPointersMaxDistance,\n        setDisabled,\n        setType,\n        setRightToLeft,\n        setBottomToTop,\n        setRound,\n        setKeyboardDisabled,\n        setMousewheelDisabled,\n        setRangeDragging,\n        setData,\n      },\n      {\n        getPercents,\n        getValues,\n        getPointerElements,\n        getActivePointerIndex: getSelectedPointerIndex,\n\n        getMin: getNumericMin,\n        getMax: getNumericMax,\n\n        getStep,\n        getData,\n        getType,\n        getRound,\n\n        getTextMin: getMin,\n        getTextMax: getMax,\n\n        isRightToLeft,\n        isBottomToTop,\n\n        isDisabled,\n        isKeyboardDisabled,\n        isMousewheelDisabled,\n\n        isPointersOverlap,\n        isRangeDraggingEnabled,\n        getPointersMinDistance,\n        getPointersMaxDistance,\n\n        getEventName: getEventType\n      }\n    );\n    pluginsManager.init();\n  })();\n\n  const destroy = () => {\n    $slider.removeEventListener('mousedown', onMouseDown);\n    $slider.removeEventListener('mouseup', onMouseUp);\n    $slider.removeEventListener('touchmove', onValueChange);\n    $slider.removeEventListener('touchstart', onValueChange);\n    document.removeEventListener('wheel', pointerMouseWheel);\n\n    for(const pointer of pointers){\n      pointer.destroy();\n    }\n\n    pluginsManager?.destroy();\n  };\n\n  return {\n    get pointers() {\n      return pointers;\n    },\n\n    get styles() {\n      return styles;\n    },\n\n    get pluginsManager() {\n      return pluginsManager;\n    },\n\n    get min() {\n      return getMin();\n    },\n\n    get max() {\n      return getMax();\n    },\n\n    get step() {\n      return getStep();\n    },\n\n    get pointersOverlap() {\n      return isPointersOverlap();\n    },\n\n    set pointersOverlap(_pointersOverlap) {\n      setPointersOverlap(_pointersOverlap);\n    },\n\n    get pointersMinDistance() {\n      return getPointersMinDistance();\n    },\n\n    set pointersMinDistance(_pointersMinDistance) {\n      setPointersMinDistance(_pointersMinDistance);\n    },\n\n    get pointersMaxDistance() {\n      return getPointersMaxDistance();\n    },\n\n    set pointersMaxDistance(_pointersMaxDistance) {\n      setPointersMaxDistance(_pointersMaxDistance);\n    },\n\n    get disabled() {\n      return isDisabled();\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    get data() {\n      return getData();\n    },\n\n    get type() {\n      return getType();\n    },\n\n    set type(_type) {\n      setType(_type);\n    },\n\n    get rightToLeft() {\n      return isRightToLeft();\n    },\n\n    set rightToLeft(_rightToLeft) {\n      setRightToLeft(_rightToLeft);\n    },\n\n    get bottomToTop() {\n      return isBottomToTop();\n    },\n\n    set bottomToTop(_bottomToTop) {\n      setBottomToTop(_bottomToTop);\n    },\n\n    get round() {\n      return getRound();\n    },\n\n    set round(_round) {\n      setRound(_round);\n    },\n\n    get animateOnClick() {\n      return animateOnClick;\n    },\n\n    set animateOnClick(_animateOnClick) {\n      setAnimateOnClick(_animateOnClick);\n    },\n\n    get keyboardDisabled() {\n      return isKeyboardDisabled();\n    },\n\n    set keyboardDisabled(_keyboardDisabled){\n      setKeyboardDisabled(_keyboardDisabled);\n    },\n\n    get mousewheelDisabled() {\n      return isMousewheelDisabled();\n    },\n\n    set mousewheelDisabled(_mousewheelDisabled){\n      setMousewheelDisabled(_mousewheelDisabled);\n    },\n\n    get rangeDragging() {\n      return isRangeDraggingEnabled();\n    },\n\n    set rangeDragging(_rangeDragging) {\n      setRangeDragging(_rangeDragging);\n    },\n\n    setMin,\n    setMax,\n    setValue,\n    setStep,\n    setData,\n    getTextValue,\n    setAriaLabel,\n    getAriaLabel,\n\n    addPointer,\n    removePointer,\n\n    destroy,\n  };\n};\n\n", "import * as AttributesEnum from '../enums/attributes-enum';\nimport { ISlider, ROUND_DEFAULT } from '../ui/slider';\nimport { getBoolean, getNumber } from './math-provider';\nimport { stylePropertiesList } from '../ui/styles';\n\nexport const onAttributeChange = (slider: ISlider, attrName: string, newValue: string) => {\n\n  // handle style properties ------------------------------------\n  // try to get style property - ['--pointer-width', 'pointer-width', 1, 'pointerWidth']\n  const found = stylePropertiesList.find(([_cssVariableName, _attrName, _apiProperty, _regex]) => {\n    return _attrName.replace('#', '') === attrName.replace(/\\d+/g, '');\n  });\n\n  if(found && slider.styles){\n    const [_cssVariableName, _attrName, _apiProperty, _regex] = found;\n\n    const key = attrName.replace(/\\D/g, '').trim();\n    const index = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1);\n\n    slider.styles.setStyle(_cssVariableName, newValue, index);\n    return;\n  }\n\n  if(slider && slider.pluginsManager){\n    slider.pluginsManager.onAttrChange(attrName, newValue);\n  }\n\n  // handle static properties ----------------------------------\n  switch (attrName) {\n\n    case AttributesEnum.Min: {\n      slider.setMin(newValue);\n      break;\n    }\n\n    case AttributesEnum.Max: {\n      slider.setMax(newValue);\n      break;\n    }\n\n    case AttributesEnum.Step: {\n      slider.setStep(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersOverlap: {\n      slider.pointersOverlap = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMinDistance: {\n      slider.pointersMinDistance = getNumber(newValue, 0);\n      break;\n    }\n\n    case AttributesEnum.RangeDragging: {\n      slider.rangeDragging = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMaxDistance: {\n      slider.pointersMaxDistance = getNumber(newValue, Infinity);\n      break;\n    }\n\n    case AttributesEnum.Disabled: {\n      slider.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.KeyboardDisabled: {\n      slider.keyboardDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.MousewheelDisabled: {\n      slider.mousewheelDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Data: {\n      slider.setData(newValue);\n      break;\n    }\n\n    case AttributesEnum.Type: {\n      slider.type = newValue;\n      break;\n    }\n\n    case AttributesEnum.RightToLeft: {\n      slider.rightToLeft = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.BottomToTop: {\n      slider.bottomToTop = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Round: {\n      slider.round = getNumber(newValue, ROUND_DEFAULT);\n      break;\n    }\n\n    case AttributesEnum.Theme: {\n      if(slider.styles){\n        slider.styles.theme = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.AnimateOnClick: {\n      slider.animateOnClick = newValue;\n      break;\n    }\n  }\n\n  // handle dynamic properties ------------------------------------\n  let property: string | null = null;\n\n  if(/^value([0-9]*)$/.test(attrName)){\n    property = 'value';\n  }\n\n  if(/^pointer([0-9]*)-disabled$/.test(attrName)){\n    property = 'pointer-disabled';\n  }\n\n  if(/^aria-label([0-9]*)$/.test(attrName)){\n    property = 'aria-label';\n  }\n\n  if(/^pointer([0-9]*)-shape$/.test(attrName)){\n    property = 'pointer-shape';\n  }\n\n  if(!property) return;\n\n  const key = attrName.replace(/\\D/g, '').trim();\n  const index = (key === '' || key === '0' || key === '1') ? 0 : (getNumber(key, 0) - 1)\n\n  switch (property) {\n\n    case 'value': {\n      slider.setValue(newValue, index);\n      break;\n    }\n\n    case 'pointer-disabled': {\n      const pointer = slider?.pointers[index];\n      if(!pointer) return;\n\n      pointer.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case 'aria-label': {\n      slider.setAriaLabel(index, newValue);\n      break;\n    }\n\n    case 'pointer-shape': {\n      if(slider.styles){\n        slider.styles.setPointerShape(index, newValue);\n      }\n      break;\n    }\n  }\n};", "import mainTemplate from '../templates/main.html.js'; // esbuild custom loader\nimport styles from './styles.pcss';\nimport { onAttributeChange } from '../domain/attributes-provider';\nimport { ISlider, ROUND_DEFAULT, Slider } from '../ui/slider';\nimport { TData, TStep } from '../types';\nimport { getBoolean } from '../domain/math-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { getExternalCSSList } from '../domain/common-provider';\nimport { initPointerAPI, initPointerAPIs, initPointers } from '../domain/pointers-provider';\n\n/**\n * Usage: <toolcool-range-slider value=\"0\" min=\"0\" max=\"100\"></toolcool-range-slider>\n * Documentation: https://github.com/mzusin/toolcool-range-slider\n */\nclass TCRangeSlider extends HTMLElement {\n\n  public slider: ISlider | undefined;\n\n  private _externalCSSList: string[] | null = [];\n\n  private _observer: MutationObserver | null = null;\n\n  // -------------- APIs --------------------\n\n  public set step(_step: TStep) {\n    if(this.slider){\n      this.slider.setStep(_step);\n    }\n  }\n\n  public get step() {\n    return this.slider?.step;\n  }\n\n  public set disabled(_disabled: boolean) {\n    if(this.slider){\n      this.slider.disabled = _disabled;\n    }\n  }\n\n  public get disabled() {\n    return this.slider?.disabled ?? false;\n  }\n\n  public set data(_data: TData) {\n    this.slider?.setData(_data);\n  }\n\n  public get data() {\n    return this.slider?.data;\n  }\n\n  public set min(_min: number | string | undefined | null) {\n    this.slider?.setMin(_min);\n  }\n\n  public get min() {\n    return this.slider?.min;\n  }\n\n  public set max(_max: number | string | undefined | null) {\n    this.slider?.setMax(_max);\n  }\n\n  public get max() {\n    return this.slider?.max;\n  }\n\n  public set round(_round: number) {\n    if(!this.slider) return;\n    this.slider.round = _round;\n  }\n\n  public get round() {\n    return this.slider?.round ?? ROUND_DEFAULT;\n  }\n\n  public set type(_type: string | undefined) {\n    if(!this.slider) return;\n    this.slider.type = _type ?? TypeEnum.Horizontal;\n  }\n\n  public get type() {\n    return this.slider?.type || TypeEnum.Horizontal;\n  }\n\n  public set pointersOverlap(_pointersOverlap: boolean) {\n    if(!this.slider) return;\n    this.slider.pointersOverlap = _pointersOverlap;\n  }\n\n  public get pointersOverlap() {\n    return this.slider?.pointersOverlap ?? false;\n  }\n\n  public set pointersMinDistance(_pointersMinDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMinDistance = _pointersMinDistance;\n  }\n\n  public get pointersMinDistance() {\n    return this.slider?.pointersMinDistance ?? 0;\n  }\n\n  public set pointersMaxDistance(_pointersMaxDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMaxDistance = _pointersMaxDistance;\n  }\n\n  public get pointersMaxDistance() {\n    return this.slider?.pointersMaxDistance ?? Infinity;\n  }\n\n  public set theme(_theme: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.theme = _theme;\n  }\n\n  public get theme() {\n    return this.slider?.styles?.theme ?? null;\n  }\n\n  public set rtl(_rtl: boolean) {\n    if(!this.slider) return;\n    this.slider.rightToLeft = _rtl;\n  }\n\n  public get rtl() {\n    return this.slider?.rightToLeft ?? false;\n  }\n\n  public set btt(_btt: boolean) {\n    if(!this.slider) return;\n    this.slider.bottomToTop = _btt;\n  }\n\n  public get btt() {\n    return this.slider?.bottomToTop ?? false;\n  }\n\n  public set keyboardDisabled(_keyboardDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.keyboardDisabled = _keyboardDisabled;\n  }\n\n  public get keyboardDisabled() {\n    return this.slider?.keyboardDisabled ?? false;\n  }\n\n  public set mousewheelDisabled(_mousewheelDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.mousewheelDisabled = _mousewheelDisabled;\n  }\n\n  public get mousewheelDisabled() {\n    return this.slider?.mousewheelDisabled ?? false;\n  }\n\n  public set animateOnClick(_animateOnClick: string | boolean | undefined) {\n    if(!this.slider) return;\n    this.slider.animateOnClick = _animateOnClick;\n  }\n\n  public get animateOnClick() {\n    return this.slider?.animateOnClick;\n  }\n\n  public get rangeDragging(){\n    return this.slider?.rangeDragging ?? false;\n  }\n\n  public set rangeDragging(_rangeDragging: boolean | string | undefined | null) {\n    if(this.slider){\n      this.slider.rangeDragging = getBoolean(_rangeDragging);\n    }\n  }\n\n  public get externalCSSList() {\n    return this._externalCSSList;\n  }\n\n  public addPointer(value: number | string | undefined) {\n    if(!this.slider) return;\n\n    const index = this.slider?.addPointer(value) ?? 0;\n\n    initPointerAPI(this,\n      this.slider,\n      index,\n      `value${ index + 1 }`,\n      `ariaLabel${ index + 1 }`,\n      `pointerShape${ index + 1 }`,\n      `pointer${ index + 1 }Disabled`\n    );\n  }\n\n  public removePointer() {\n    if(!this.slider) return;\n    this.slider?.removePointer();\n  }\n\n  public addCSS(css: string) {\n    if(!this.shadowRoot) return;\n\n    const sheet = document.createElement('style')\n    sheet.textContent = css;\n    this.shadowRoot.appendChild(sheet);\n  }\n\n  // ----------------------------------------------\n\n  constructor() {\n    super();\n\n    this.attachShadow({\n      mode: 'open', // 'closed', 'open',\n    });\n  }\n\n  /**\n   * when the custom element connected to DOM\n   */\n  connectedCallback() {\n    if (!this.shadowRoot) return;\n\n    // get optional external CSS list\n    this._externalCSSList = getExternalCSSList(this);\n    this.shadowRoot.innerHTML = mainTemplate(styles, this._externalCSSList);\n\n    // init first pointer\n    const $pointer = this.shadowRoot?.querySelector('.pointer') as HTMLElement;\n    if(!$pointer) return;\n\n    // init the slider\n    const $slider = this.shadowRoot?.getElementById('range-slider') as HTMLElement;\n    if(!$slider) return;\n\n    const pointers = initPointers(this, $pointer);\n    this.slider = Slider(this, $slider, pointers);\n\n    initPointerAPIs(this, this.slider);\n\n    this._observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (!this.slider || mutation.type !== 'attributes') return;\n\n        const attrName = mutation.attributeName;\n        if(!attrName) return;\n\n        onAttributeChange(this.slider, attrName, this.getAttribute(attrName) ?? '');\n      });\n    });\n\n    this._observer.observe(this, {\n      attributes: true, //configure it to listen to attribute changes\n    });\n  }\n\n  /**\n   * when the custom element disconnected from DOM\n   */\n  disconnectedCallback() {\n    if(this._observer){\n      this._observer.disconnect();\n    }\n\n    if(!this.slider) return\n\n    this.slider.destroy();\n  }\n}\n\nexport default TCRangeSlider;\n", "import TCRangeSlider from './app/range-slider';\nimport { DynamicFields } from './types';\n\ntype RangeSlider = TCRangeSlider & HTMLElement & DynamicFields;\n\ndeclare global {\n  interface Window {\n    tcRangeSlider: typeof TCRangeSlider;\n  }\n}\n\nwindow.tcRangeSlider = TCRangeSlider;\n\n// register web components\nif (!customElements.get('toolcool-range-slider')) {\n  customElements.define('toolcool-range-slider', TCRangeSlider);\n}\n\nif (!customElements.get('tc-range-slider')) {\n  customElements.define('tc-range-slider', class extends TCRangeSlider{});\n}\n\nexport default RangeSlider;\n\n\n"],
  "mappings": "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",
  "names": ["main_html_default", "styles", "linkHrefs", "linkHref", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "RangeDragging", "Data", "Min", "Max", "Step", "Round", "Type", "Theme", "RightToLeft", "BottomToTop", "Disabled", "KeyboardDisabled", "MousewheelDisabled", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "AnimateOnClick", "CSSLinks", "Vertical", "Horizontal", "convertRange", "min", "max", "a", "b", "x", "temp", "isNumber", "input", "getNumber", "defaultValue", "roundToStep", "num", "step", "setDecimalPlaces", "decimalPlaces", "coeff", "__pow", "getBoolean", "val", "sendPointerClickedEvent", "$component", "$pointer", "sendMouseDownEvent", "evt", "sendMouseUpEvent", "sendOnKeyDownEvent", "sendChangeEvent", "values", "transformed", "value", "isNumber", "getNumber", "detail", "i", "Pointer", "$component", "$pointer", "index", "percent", "arrowLeft", "arrowRight", "arrowUp", "arrowDown", "disabled", "updatePosition", "_percent", "_leftWall", "_rightWall", "_type", "_rightToLeft", "_bottomToTop", "oldValue", "percentPos", "Vertical", "Horizontal", "isClicked", "$target", "setCallbacks", "_arrowLeft", "_arrowRight", "_arrowUp", "_arrowDown", "setDisabled", "_disabled", "setAttr", "key", "value", "getAttr", "pointerKeyDown", "evt", "sendOnKeyDownEvent", "pointerClicked", "sendPointerClickedEvent", "parseData", "dataString", "parts", "list", "allValuesAreNumbers", "i", "part", "isNumber", "item", "findValueIndexInData", "val", "data", "PanelFill", "$fill", "type", "percents", "rightToLeft", "bottomToTop", "oneOnly", "first", "last", "Vertical", "AnimateOnClick", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "getAttributesByRegex", "$component", "regex", "parseValue", "map", "attr", "valueProp", "key", "keyNum", "getNumber", "value", "getExternalCSSList", "str", "CSSLinks", "parts", "cssList", "part", "stylePropertiesList", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "Styles", "$component", "$slider", "pointers", "theme", "pointerShapes", "stylesMap", "removeClassesStartWith", "prefix", "$element", "classList", "className", "removeClasses", "$pointers", "$pointer", "setTheme", "val", "updatePointerShapes", "i", "item", "setPointerShape", "index", "value", "setPointerShapes", "list", "getAttributesByRegex", "getKey", "key", "setStyle", "pointer", "$styleHolder", "getStyle", "cssVariableName", "attrName", "apiProperty", "regex", "cssVariableValue", "apiProperties", "propName", "ex", "Theme", "AnimateOnClick", "RangeDragging", "PluginsManager", "$component", "requestUpdatePlugins", "setters", "getters", "plugins", "update", "data", "plugin", "destroy", "onAttrChange", "_attrName", "_newValue", "defineSettersGetters", "item", "ex", "initStyles", "_a", "$style", "pluginFunc", "MAX_VALUES_API", "POINTER_Z_INDEX_DEFAULT", "initPointers", "$component", "$pointer", "map", "regex", "attr", "valueProp", "key", "keyNum", "getNumber", "value", "isNumber", "max", "pointers", "Pointer", "$latestPointer", "i", "$newPointer", "initPointerAPI", "slider", "index", "ariaLabelProp", "pointerShapeProp", "pointerDisabledProp", "pointer", "val", "_a", "_b", "ex", "initPointerAPIs", "apiProperties", "item", "changePointersOrder", "isDesc", "$container", "setZIndex", "selectedPointer", "MIN_DEFAULT", "MAX_DEFAULT", "ROUND_DEFAULT", "ANIMATE_ON_CLICK_DEFAULT", "Slider", "$component", "$slider", "pointersList", "pointers", "item", "selectedPointer", "panelFill", "styles", "pluginsManager", "min", "max", "step", "data", "type", "Horizontal", "round", "rightToLeft", "bottomToTop", "pointersOverlap", "pointersMinDistance", "pointersMaxDistance", "rangeDragging", "rangeDraggingStart", "rangeDraggingDiff", "disabled", "keyboardDisabled", "mousewheelDisabled", "animateOnClick", "eventName", "touchClientX", "touchClientY", "ariaLabels", "onMouseDown", "evt", "onValueChange", "onMouseUp", "sendMouseDownEvent", "AnimateOnClick", "sendMouseUpEvent", "getActivePointer", "$target", "percent", "panelFillClicked", "isPanelFillClicked", "_dragPercent", "stepPercent", "getStepPercent", "roundToStep", "isPanelClicked", "pointer", "minDistance", "minDistancePointer", "distance", "getSelectedPointerIndex", "setEventType", "Vertical", "boxHeight", "boxTop", "mouseY", "boxWidth", "boxLeft", "mouseX", "setZIndex", "firstPointer", "lastPointer", "firstSmallerThanMin", "lastGreaterThanMax", "i", "setPositions", "foundIndex", "pointerMouseWheel", "scrollTop", "rightOrBottom", "shouldGoPrev", "goPrev", "goNext", "arrowLeft", "pointerIndex", "arrowRight", "arrowUp", "arrowDown", "index", "_percent", "updatePlugins", "getPercents", "getValues", "getPointerElements", "getNumericMin", "getNumericMax", "getData", "getStep", "getRound", "getType", "getMin", "getMax", "isRightToLeft", "isBottomToTop", "isPointersOverlap", "getPointersMinDistance", "getPointersMaxDistance", "isRangeDraggingEnabled", "isDisabled", "isKeyboardDisabled", "isMousewheelDisabled", "requestUpdatePlugins", "getEventType", "getPointerLeftWall", "converted", "getPointerRightWall", "_step", "currentValue", "convertRange", "isNumber", "diff", "getTextValue", "val", "setDecimalPlaces", "getPointerMin", "_a", "getPointerMax", "getAriaLabel", "_eventName", "percentChanged", "valueText", "setAriaMinMax", "sendChangeEvent", "setAllPositions", "setMinMax", "_min", "_max", "getNumber", "setMin", "setMax", "_b", "setValues", "values", "setValue", "_val", "findValueIndexInData", "setStep", "setPointersOverlap", "_pointersOverlap", "setPointersMinDistance", "_pointersMinDistance", "setPointersMaxDistance", "_pointersMaxDistance", "setDisabled", "_disabled", "setKeyboardDisabled", "setMousewheelDisabled", "setData", "_data", "parseData", "setType", "_type", "$box", "aria", "setRightToLeft", "_rightToLeft", "changePointersOrder", "setBottomToTop", "_bottomToTop", "setRound", "_round", "setAnimateOnClick", "_animateOnClick", "setAriaLabel", "_ariaLabel", "setRangeDragging", "_rangeDragging", "RangeDragging", "initDisabled", "getBoolean", "Disabled", "KeyboardDisabled", "MousewheelDisabled", "disabledList", "getAttributesByRegex", "initAriaLabels", "ariaLabelsList", "addPointer", "value", "len", "$latestPointer", "$newPointer", "newPointer", "Pointer", "removePointer", "$fill", "PanelFill", "Type", "RightToLeft", "BottomToTop", "Min", "Max", "Step", "Data", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "Round", "Styles", "PluginsManager", "_keyboardDisabled", "_mousewheelDisabled", "onAttributeChange", "slider", "attrName", "newValue", "found", "stylePropertiesList", "_cssVariableName", "_attrName", "_apiProperty", "_regex", "key", "index", "getNumber", "Min", "Max", "Step", "PointersOverlap", "getBoolean", "PointersMinDistance", "RangeDragging", "PointersMaxDistance", "Disabled", "KeyboardDisabled", "MousewheelDisabled", "Data", "Type", "RightToLeft", "BottomToTop", "Round", "ROUND_DEFAULT", "Theme", "AnimateOnClick", "property", "pointer", "TCRangeSlider", "__publicField", "_step", "_a", "_disabled", "_b", "_data", "_min", "_max", "_round", "ROUND_DEFAULT", "_type", "Horizontal", "_pointersOverlap", "_pointersMinDistance", "_pointersMaxDistance", "_theme", "_c", "_rtl", "_btt", "_keyboardDisabled", "_mousewheelDisabled", "_animateOnClick", "_rangeDragging", "getBoolean", "value", "index", "initPointerAPI", "css", "sheet", "getExternalCSSList", "main_html_default", "styles_default", "$pointer", "$slider", "pointers", "initPointers", "Slider", "initPointerAPIs", "mutations", "mutation", "attrName", "onAttributeChange", "range_slider_default", "range_slider_default"]
}
